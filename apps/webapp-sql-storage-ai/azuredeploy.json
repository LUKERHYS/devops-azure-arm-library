{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "deployEnvironment": {
      "type": "string",
      "allowedValues": [
        "poc",
        "pr",
        "dev",
        "wip",
        "test",
        "prod",
        "demo"
      ]
    },
    "sharedResourceGroup" : {
      "type": "string",
      "allowedValues": [
        "qa_shared",
        "prod-shared"
      ]
    },
    "appserviceName": {
      "type": "string",
      "allowedValues": [
        "qa-shared",
        "prod-shared"
      ]
    },
    "sqlserverName" : {
      "type": "string",
      "allowedValues": [
        "qa-shared",
        "prod-shared"
      ],
      "metadata": {
        "description" : ""
      }
    },
    "sqlserverDbPoolName" : {
      "type": "string",
      "allowedValues": [
        "qa-shared",
        "prod-shared"
      ],
      "defaultValue": "[parameters('sqlserverName')]",
      "metadata": {
        "description" : ""
      }
    },    
    "clientPrefix": {
      "type": "string",
      "minLength": 1,
      "maxLength": 10,
      "metadata": {
        "description" : "A client prefix value to use when creating or configuring resources"
      }
    },
    "siteName" : {
      "type": "string",
      "minLength": 0,
      "maxLength": 25,
      "defaultValue": ""
    },    
    "webappName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 10,
      "metadata": {
        "description" : "The name of the application itself, without any environment definition such as wip, test or prod"
      }      
    },    
    "sqlDbAppUser" : {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description" : ""
      }
    },    
    "sqlDbAppPassword" : {
      "type": "securestring",
      "metadata": {
        "description" : ""
      }
    },
    "primaryHostname" : {
      "type": "string",
      "defaultValue": "[if(empty(parameters('customHostname')), '', parameters('customHostname')[0])]",
      "metadata": {
        "description" : "Specify a primary hostname (excluding httpScheme) to use for any application configuration values, this is likely the canonical hostname for the site"
      }
    },
    "customHostname" : {
      "type": "array",
      "defaultValue": [ "" ],
      "metadata": {
        "description" : "The custom hostnames (excluding any protocol definition) that already contains a valid CNAME record pointing at the webapp name's azurewebsites.net address, if empty this step will be skipped"
      }
    },
    "certificateThumbprint" : {
      "type": "array",
      "defaultValue": [ "" ],
      "metadata": {
        "description" : "The thumbprint of an SSL certificate for each custom hostname (array indices should match between customHostname and this parameter) that is already available within the targetted deployment subscription, if empty this step will be skipped"
      }
    },           
    "appInsightsLocation": {
      "type": "string",
      "allowedValues": [
        "NorthEurope",
        "WestEurope"
      ],
      "defaultValue": "NorthEurope"
    },
    "storageAccountResourceGroup": {
      "type": "string",
      "defaultValue": "[parameters('sharedResourceGroup')]"
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": ""
    },
    "storageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Storage type required"
      }
    }
  },
  "variables": {
    "isProdDeploy" : "[if(equals(parameters('deployEnvironment'), 'prod'), bool('false'), bool('true'))]",
    "siteName" : "[if(empty(parameters('siteName')), toLower(concat(parameters('clientPrefix'), '-', parameters('deployEnvironment'), '-', parameters('webappName'))), parameters('siteName'))]",
    "useSharedStorage" : "[not(empty(parameters('storageAccountName')))]",
    "storageName" : "[toLower(replace(replace(if(empty(parameters('storageAccountName')), variables('siteName'), parameters('storageAccountName')), '-', ''), '_', ''))]",
    "storageAccountResourceGroup" : "[toLower(if(empty(parameters('storageAccountName')), resourceGroup().name, parameters('storageAccountResourceGroup')))]",
    "siteDeploySlotName" : "deploy",
    "sqlDbName" : "[variables('siteName')]",
    "sqlDbUserId" : "[if(empty(parameters('sqlDbAppUser')), variables('siteName'), parameters('sqlDbAppUser'))]",
    "sqlDbUserPassword" : "[parameters('sqlDbAppPassword')]",
    "appInsightsResource" : "[concat('microsoft.insights/components/', variables('siteName'))]",
    "storageAccountBlobRootUri" : "[concat('https://', variables('storageName'), '.blob.core.windows.net')]",
    "useSsl" : "[if(empty(parameters('certificateThumbprint')), bool('false'), bool('true'))]",
    "httpScheme" : "[if(variables('useSsl'), 'https://', 'http://')]",
    "primaryHostname" : "[parameters('primaryHostname')]"
  },
  "functions": [
    {
        "namespace": "sql",
        "members": {
            "buildConnectionString": {
                "parameters": [
                    {
                        "name": "sqlServerFqdn",
                        "type": "string"
                    },
                    {
                        "name": "sqlDatabaseName",
                        "type": "string"
                    },
                    {
                        "name": "sqlDatabaseUserId",
                        "type": "string"
                    },
                    {
                        "name": "sqlDatabaseUserPassword",
                        "type": "string"
                    }
                ],
                "output": {
                    "type": "string",
                    "value": "[concat('Server=tcp:', parameters('sqlServerFqdn') ,',1433;Initial Catalog=',parameters('sqlDatabaseName'),';Persist Security Info=False;User ID=', parameters('sqlDatabaseUserId'), ';Password=', parameters('sqlDatabaseUserPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
                }
            }
        }
    }
],  
  "outputs": {
    "clientPrefix" : {
      "type": "string",
      "value": "[parameters('clientPrefix')]"
    },
    "deployEnvironment" : {
      "type": "string",
      "value": "[parameters('deployEnvironment')]"
    },
    "siteName" : {
      "type": "string",
      "value": "[reference(concat('Microsoft.Web/sites/', variables('siteName'))).name]"
    },
    "siteUrl" : {
      "type": "string",
      "value": "[reference(concat('Microsoft.Web/sites/', variables('siteName'))).hostnames[0]]"
    },
    "siteSlotName" : {
      "type": "string",
      "value": "[variables('siteDeploySlotName')]"
    },
    "siteSlotUrl" : {
      "type": "string",
      "value": "[reference(concat('Microsoft.Web/sites/', variables('siteName'), '/slots/', variables('siteDeploySlotName'))).hostnames[0]]"
    },        
    "sqlDbGroup" : {
      "type": "string",
      "value": "[parameters('sharedResourceGroup')]"
    },
    "sqlDbAppUser" : {
      "type": "string",
      "value": "[variables('sqlDbUserId')]"
    },    
    "sqlDbServer" : {
      "type": "string",
      "value": "[parameters('sqlserverName')]"
    },
    "sqlDbServerFqdn" : {
      "type": "string",
      "value": "[reference('sqlDb').outputs.sqlServerFqdn.value]"
    },        
    "sqlDbName" : {
      "type": "string",
      "value": "[variables('sqlDbName')]"
    }
  },
  "resources": [
    {
      "apiVersion": "2017-05-10",
      "name": "sqlDb",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[parameters('sharedResourceGroup')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
           "uri":"https://raw.githubusercontent.com/stormid/devops-azure-arm-library/master/sql/sql-db-blank-existing-pool/azuredeploy.json",
           "contentVersion":"1.1.0.0"
        },
        "parameters" : {
          "sqlServerName" : { "value" : "[parameters('sqlserverName')]" },
          "sqlPoolName" : { "value" : "[parameters('sqlserverDbPoolName')]" },
          "sqlDbName" : { "value" : "[variables('sqlDbName')]" }
        }
      }
    },
    {
      "condition" : "[not(empty(parameters('customHostname')[copyIndex()]))]",
      "type":"Microsoft.Web/Sites/hostnameBindings",
      "name": "[concat(variables('siteName'), '/', if(not(empty(parameters('customHostname')[copyIndex()])), parameters('customHostname')[copyIndex()], 'dummy'))]",
      "apiVersion":"2018-02-01",
      "location":"[resourceGroup().location]",
      "properties":{
          "siteName" : "[variables('siteName')]",
          "hostNameType" : "Verified",
          "azureResourceType" : "Website",
          "sslState" : "[if(greater(length(parameters('certificateThumbprint')[copyIndex()]), 0), 'SniEnabled', 'Disabled')]",
          "thumbprint" : "[if(greater(length(parameters('certificateThumbprint')[copyIndex()]), 0), parameters('certificateThumbprint')[copyIndex()], '')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('siteName'))]"
      ],
      "copy" : {
        "name" : "customDomainsCopy",
        "count" : "[length(parameters('customHostname'))]"
      }
    },               
    {
      "apiVersion": "2018-02-01",
      "name": "[variables('siteName')]",
      "type": "Microsoft.Web/Sites",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": { },
      "properties": {
        "serverFarmId": "[resourceId(parameters('sharedResourceGroup'), 'Microsoft.Web/serverfarms', parameters('appserviceName'))]",
        "httpsOnly": true,
        "siteConfig" : {
          "clientAffinityEnabled": true,
          "phpVersion": "",
          "webSocketsEnabled": false,
          "requestTracingEnabled": true,
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 40,
          "detailedErrorLoggingEnabled": true,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "http20Enabled": true,
          "alwaysOn"  : true,
          "use32BitWorkerProcess": false,
          "remoteDebuggingEnabled": false,
          "siteAuthEnabled": false,
          "netFrameworkVersion":"v4.7"
        }      
      },
      "resources": [
        {
          "apiVersion": "2018-02-01",
          "type": "slots",
          "name": "[variables('siteDeploySlotName')]",
          "kind": "app",
          "location": "[resourceGroup().location]",
          "identity": {
            "type": "SystemAssigned"
          },    
          "tags": { },
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('siteName'))]"
          ],
          "properties": {
          },
          "resources" : [
            {
              "apiVersion": "2018-02-01",
              "name": "appsettings",
              "type": "config",
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites/slots', variables('siteName'), variables('siteDeploySlotName'))]"
              ],
              "properties": {
                "WEBSITE_TIME_ZONE" : "GMT Standard Time",
                "APPINSIGHTS_INSTRUMENTATIONKEY" : "[reference(variables('appInsightsResource')).InstrumentationKey]",
                "APPINSIGHTS_DEVELOPER_MODE" : "[if(variables('isProdDeploy'), 'false', 'true')]",

                "BaseUrl" : "[if(empty(variables('primaryHostname')), concat(variables('httpScheme'), reference(concat('Microsoft.Web/sites/', variables('siteName'))).hostnames[0], '/'), concat(variables('httpScheme'), variables('primaryHostname'), '/'))]",
              }
            },
            {
              "apiVersion": "2018-02-01",
              "name": "connectionstrings",
              "type": "config",
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites/slots', variables('siteName'), variables('siteDeploySlotName'))]"
              ],
              "properties": {
                "umbracoDbDsn" : {
                  "value" : "[sql.buildConnectionString(reference('sqlDb').outputs.sqlServerFqdn.value, variables('sqlDbName'), variables('sqlDbUserId'), variables('sqlDbUserPassword'))]",
                  "type" : "SQLAzure"
                }
              }            
            }
          ]
        },  
        {
          "name": "slotConfigNames",
          "type": "config",
          "apiVersion": "2018-02-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('siteName'))]"
          ],
          "tags": {
            "displayName": "slotConfigNames"
          },
          "properties": {
          }
        },
        {
          "apiVersion": "2015-05-01",
          "name": "[variables('siteName')]",
          "type": "Microsoft.Insights/components",
          "location": "[parameters('appInsightsLocation')]",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('siteName'))]"
          ],
          "tags": {
            "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('siteName'))]": "Resource",
            "displayName": "AppInsightsComponent"
          },
          "properties": {
            "ApplicationId": "[variables('siteName')]"
          }
        },
        {
          "condition" : "[not(variables('useSharedStorage'))]",
          "type": "Microsoft.Storage/storageAccounts",
          "name": "[variables('storageName')]",
          "apiVersion": "2018-02-01",
          "location": "[resourceGroup().location]",
          "sku": {
            "name": "[parameters('storageAccountType')]"
          },
          "tags": { },
          "kind": "BlobStorage",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('siteName'))]"
          ],
          "properties": {
            "accessTier" : "Hot",
            "supportsHttpsTrafficOnly": true,
            "encryption": {
              "keySource": "Microsoft.Storage",
              "services": {
                "blob": {
                  "enabled": true
                }
              }
            }
          }
        } 
      ]
    }
  ]
}
